{"ast":null,"code":"import { localStorageService as ls } from '../appRedux/helpers/localStorage';\nimport { restClientWithOutAuth } from './restClient';\nimport { message } from 'antd';\nimport { config } from './global';\nimport moment from 'moment';\nimport { history } from '../appRedux/store';\nexport const URL_API = config.url;\nexport function parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\n;\nexport const formatDate = date => {\n  return moment(date).format(\"YYYY-MM-DD\");\n};\nexport const setAuthValuesInLocalStorage = values => {\n  ls.set('AUTH_TOKEN', values);\n};\nexport const getAuthValuesInLocalStorage = () => {\n  const authToken = ls.get('AUTH_TOKEN');\n  return authToken;\n};\nexport const getTokenFromLocalStorage = () => {\n  try {\n    const auth = getAuthValuesInLocalStorage();\n    return auth && auth.token ? auth.token : '';\n  } catch (e) {\n    return '';\n  }\n};\nexport const signOutFromLocalStorage = () => {\n  ls.remove('AUTH_TOKEN');\n  history.push('/signin');\n};\nexport const signIn = (username, password) => {\n  return restClientWithOutAuth(`${URL_API}/users/auth/signin`, 'POST', {\n    username: username,\n    password: password\n  }).then(response => {\n    return Promise.resolve(response);\n  }).catch(error => {\n    return Promise.reject(error);\n  });\n};\nexport const successMessage = messageString => {\n  message.success(messageString);\n};\nexport const errorMessage = messageString => {\n  message.error(messageString);\n};","map":{"version":3,"sources":["/Users/renysdelacruz/Downloads/ProyectoFinal-WebAvanzada-master/proyecto_final_frontend/src/rayoDevCore/utils.js"],"names":["localStorageService","ls","restClientWithOutAuth","message","config","moment","history","URL_API","url","parseJwt","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","formatDate","date","format","setAuthValuesInLocalStorage","values","set","getAuthValuesInLocalStorage","authToken","get","getTokenFromLocalStorage","auth","e","signOutFromLocalStorage","remove","push","signIn","username","password","then","response","Promise","resolve","catch","error","reject","successMessage","messageString","success","errorMessage"],"mappings":"AAAA,SAASA,mBAAmB,IAAIC,EAAhC,QAA0C,kCAA1C;AACA,SAASC,qBAAT,QAAsC,cAAtC;AACA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA,OAAO,MAAMC,OAAO,GAAGH,MAAM,CAACI,GAAvB;AAEP,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,MAAIC,SAAS,GAAGD,KAAK,CAACE,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;AACA,MAAIC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAb;AACA,MAAIC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAD,CAAJ,CAAaD,KAAb,CAAmB,EAAnB,EAAuBM,GAAvB,CAA2B,UAAUC,CAAV,EAAa;AAC3E,WAAO,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACD,GAFoC,EAElCC,IAFkC,CAE7B,EAF6B,CAAD,CAApC;AAIA,SAAOC,IAAI,CAACC,KAAL,CAAWV,WAAX,CAAP;AACD;AAAA;AAED,OAAO,MAAMW,UAAU,GAAIC,IAAD,IAAU;AAClC,SAAOtB,MAAM,CAACsB,IAAD,CAAN,CAAaC,MAAb,CAAoB,YAApB,CAAP;AACD,CAFM;AAIP,OAAO,MAAMC,2BAA2B,GAAIC,MAAD,IAAY;AACrD7B,EAAAA,EAAE,CAAC8B,GAAH,CAAO,YAAP,EAAqBD,MAArB;AACD,CAFM;AAIP,OAAO,MAAME,2BAA2B,GAAG,MAAM;AAC/C,QAAMC,SAAS,GAAGhC,EAAE,CAACiC,GAAH,CAAO,YAAP,CAAlB;AACA,SAAOD,SAAP;AACD,CAHM;AAKP,OAAO,MAAME,wBAAwB,GAAG,MAAM;AAC5C,MAAI;AACF,UAAMC,IAAI,GAAGJ,2BAA2B,EAAxC;AACA,WAAOI,IAAI,IAAIA,IAAI,CAAC1B,KAAb,GAAqB0B,IAAI,CAAC1B,KAA1B,GAAkC,EAAzC;AACD,GAHD,CAGE,OAAO2B,CAAP,EAAU;AACV,WAAO,EAAP;AACD;AACF,CAPM;AASP,OAAO,MAAMC,uBAAuB,GAAG,MAAM;AAC3CrC,EAAAA,EAAE,CAACsC,MAAH,CAAU,YAAV;AACAjC,EAAAA,OAAO,CAACkC,IAAR,CAAa,SAAb;AACD,CAHM;AAKP,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC5C,SAAOzC,qBAAqB,CAAE,GAAEK,OAAQ,oBAAZ,EAAiC,MAAjC,EAAyC;AAAEmC,IAAAA,QAAQ,EAAEA,QAAZ;AAAsBC,IAAAA,QAAQ,EAAEA;AAAhC,GAAzC,CAArB,CACJC,IADI,CACEC,QAAD,IAAc;AAClB,WAAOC,OAAO,CAACC,OAAR,CAAgBF,QAAhB,CAAP;AACD,GAHI,EAIJG,KAJI,CAIGC,KAAD,IAAW;AAChB,WAAOH,OAAO,CAACI,MAAR,CAAeD,KAAf,CAAP;AACD,GANI,CAAP;AAOD,CARM;AAUP,OAAO,MAAME,cAAc,GAAIC,aAAD,IAAmB;AAC/CjD,EAAAA,OAAO,CAACkD,OAAR,CAAgBD,aAAhB;AACD,CAFM;AAIP,OAAO,MAAME,YAAY,GAAIF,aAAD,IAAmB;AAC7CjD,EAAAA,OAAO,CAAC8C,KAAR,CAAcG,aAAd;AACD,CAFM","sourcesContent":["import { localStorageService as ls } from '../appRedux/helpers/localStorage';\nimport { restClientWithOutAuth } from './restClient';\nimport { message } from 'antd';\nimport { config } from './global';\nimport moment from 'moment';\nimport { history } from '../appRedux/store';\n\nexport const URL_API = config.url;\n\nexport function parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n\n  return JSON.parse(jsonPayload);\n};\n\nexport const formatDate = (date) => {\n  return moment(date).format(\"YYYY-MM-DD\");\n}\n\nexport const setAuthValuesInLocalStorage = (values) => {\n  ls.set('AUTH_TOKEN', values);\n}\n\nexport const getAuthValuesInLocalStorage = () => {\n  const authToken = ls.get('AUTH_TOKEN');\n  return authToken;\n}\n\nexport const getTokenFromLocalStorage = () => {\n  try {\n    const auth = getAuthValuesInLocalStorage();\n    return auth && auth.token ? auth.token : '';\n  } catch (e) {\n    return '';\n  }\n}\n\nexport const signOutFromLocalStorage = () => {\n  ls.remove('AUTH_TOKEN');\n  history.push('/signin');\n}\n\nexport const signIn = (username, password) => {\n  return restClientWithOutAuth(`${URL_API}/users/auth/signin`, 'POST', { username: username, password: password })\n    .then((response) => {\n      return Promise.resolve(response);\n    })\n    .catch((error) => {\n      return Promise.reject(error);\n    });\n}\n\nexport const successMessage = (messageString) => {\n  message.success(messageString);\n};\n\nexport const errorMessage = (messageString) => {\n  message.error(messageString);\n};\n"]},"metadata":{},"sourceType":"module"}